//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var SharedStruct = module.exports.SharedStruct = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
SharedStruct.prototype = {};
SharedStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.key = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharedStruct.prototype.write = function(output) {
  output.writeStructBegin('SharedStruct');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.I32, 1);
    output.writeI32(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CollectionStruct = module.exports.CollectionStruct = function(args) {
  this.map1 = null;
  this.list1 = null;
  this.set1 = ['1','2','2'];
  if (args) {
    if (args.map1 !== undefined && args.map1 !== null) {
      this.map1 = Thrift.copyMap(args.map1, [null]);
    }
    if (args.list1 !== undefined && args.list1 !== null) {
      this.list1 = Thrift.copyList(args.list1, [null]);
    }
    if (args.set1 !== undefined && args.set1 !== null) {
      this.set1 = Thrift.copyList(args.set1, [null]);
    }
  }
};
CollectionStruct.prototype = {};
CollectionStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.map1 = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readBool();
          this.map1[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.list1 = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readBool();
          this.list1.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size15 = 0;
        var _rtmp319;
        this.set1 = [];
        var _etype18 = 0;
        _rtmp319 = input.readSetBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readString();
          this.set1.push(elem21);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CollectionStruct.prototype.write = function(output) {
  output.writeStructBegin('CollectionStruct');
  if (this.map1 !== null && this.map1 !== undefined) {
    output.writeFieldBegin('map1', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BOOL, Thrift.objectLength(this.map1));
    for (var kiter22 in this.map1)
    {
      if (this.map1.hasOwnProperty(kiter22))
      {
        var viter23 = this.map1[kiter22];
        output.writeString(kiter22);
        output.writeBool(viter23);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.list1 !== null && this.list1 !== undefined) {
    output.writeFieldBegin('list1', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.BOOL, this.list1.length);
    for (var iter24 in this.list1)
    {
      if (this.list1.hasOwnProperty(iter24))
      {
        iter24 = this.list1[iter24];
        output.writeBool(iter24);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.set1 !== null && this.set1 !== undefined) {
    output.writeFieldBegin('set1', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.set1.length);
    for (var iter25 in this.set1)
    {
      if (this.set1.hasOwnProperty(iter25))
      {
        iter25 = this.set1[iter25];
        output.writeString(iter25);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

