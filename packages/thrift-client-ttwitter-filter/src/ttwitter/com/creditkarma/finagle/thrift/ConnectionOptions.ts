/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IConnectionOptions {
}
export interface IConnectionOptionsArgs {
}
export const ConnectionOptionsCodec: thrift.IStructCodec<IConnectionOptionsArgs, IConnectionOptions> = {
    encode(args: IConnectionOptionsArgs, output: thrift.TProtocol): void {
        output.writeStructBegin("ConnectionOptions");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IConnectionOptions {
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {};
    }
};
export class ConnectionOptions implements thrift.IStructLike, IConnectionOptions {
    constructor(args: IConnectionOptionsArgs = {}) {
    }
    public static read(input: thrift.TProtocol): ConnectionOptions {
        return new ConnectionOptions(ConnectionOptionsCodec.decode(input));
    }
    public static write(args: IConnectionOptionsArgs, output: thrift.TProtocol): void {
        return ConnectionOptionsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ConnectionOptionsCodec.encode(this, output);
    }
}
