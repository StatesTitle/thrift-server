/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.5
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IEndpoint {
    ipv4?: number;
    port?: number;
    service_name?: string;
}
export interface IEndpointArgs {
    ipv4?: number;
    port?: number;
    service_name?: string;
}
export const EndpointCodec: thrift.IStructCodec<IEndpointArgs, IEndpoint> = {
    encode(args: IEndpointArgs, output: thrift.TProtocol): void {
        const obj: any = {
            ipv4: args.ipv4,
            port: args.port,
            service_name: args.service_name
        };
        output.writeStructBegin("Endpoint");
        if (obj.ipv4 != null) {
            output.writeFieldBegin("ipv4", thrift.TType.I32, 1);
            output.writeI32(obj.ipv4);
            output.writeFieldEnd();
        }
        if (obj.port != null) {
            output.writeFieldBegin("port", thrift.TType.I16, 2);
            output.writeI16(obj.port);
            output.writeFieldEnd();
        }
        if (obj.service_name != null) {
            output.writeFieldBegin("service_name", thrift.TType.STRING, 3);
            output.writeString(obj.service_name);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IEndpoint {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.ipv4 = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I16) {
                        const value_2: number = input.readI16();
                        _args.port = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.service_name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            ipv4: _args.ipv4,
            port: _args.port,
            service_name: _args.service_name
        };
    }
};
export class Endpoint extends thrift.StructLike implements IEndpoint {
    public ipv4?: number;
    public port?: number;
    public service_name?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IEndpointArgs = {}) {
        super();
        if (args.ipv4 != null) {
            const value_4: number = args.ipv4;
            this.ipv4 = value_4;
        }
        if (args.port != null) {
            const value_5: number = args.port;
            this.port = value_5;
        }
        if (args.service_name != null) {
            const value_6: string = args.service_name;
            this.service_name = value_6;
        }
    }
    public static read(input: thrift.TProtocol): Endpoint {
        return new Endpoint(EndpointCodec.decode(input));
    }
    public static write(args: IEndpointArgs, output: thrift.TProtocol): void {
        return EndpointCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return EndpointCodec.encode(this, output);
    }
}
