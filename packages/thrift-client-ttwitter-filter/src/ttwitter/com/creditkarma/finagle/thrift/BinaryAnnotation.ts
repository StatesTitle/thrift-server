/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6-1
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as AnnotationType from "./AnnotationType";
import * as Endpoint from "./Endpoint";
export interface IBinaryAnnotation {
    key?: string;
    value?: Buffer;
    annotation_type?: AnnotationType.AnnotationType;
    host?: Endpoint.IEndpoint;
}
export interface IBinaryAnnotationArgs {
    key?: string;
    value?: string | Buffer;
    annotation_type?: AnnotationType.AnnotationType;
    host?: Endpoint.IEndpointArgs;
}
export const BinaryAnnotationCodec: thrift.IStructCodec<IBinaryAnnotationArgs, IBinaryAnnotation> = {
    encode(args: IBinaryAnnotationArgs, output: thrift.TProtocol): void {
        const obj: any = {
            key: args.key,
            value: (typeof args.value === "string" ? Buffer.from(args.value) : args.value),
            annotation_type: args.annotation_type,
            host: args.host
        };
        output.writeStructBegin("BinaryAnnotation");
        if (obj.key != null) {
            output.writeFieldBegin("key", thrift.TType.STRING, 1);
            output.writeString(obj.key);
            output.writeFieldEnd();
        }
        if (obj.value != null) {
            output.writeFieldBegin("value", thrift.TType.STRING, 2);
            output.writeBinary(obj.value);
            output.writeFieldEnd();
        }
        if (obj.annotation_type != null) {
            output.writeFieldBegin("annotation_type", thrift.TType.I32, 3);
            output.writeI32(obj.annotation_type);
            output.writeFieldEnd();
        }
        if (obj.host != null) {
            output.writeFieldBegin("host", thrift.TType.STRUCT, 4);
            Endpoint.EndpointCodec.encode(obj.host, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IBinaryAnnotation {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.key = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: Buffer = input.readBinary();
                        _args.value = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: AnnotationType.AnnotationType = input.readI32();
                        _args.annotation_type = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: Endpoint.IEndpoint = Endpoint.EndpointCodec.decode(input);
                        _args.host = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            key: _args.key,
            value: _args.value,
            annotation_type: _args.annotation_type,
            host: _args.host
        };
    }
};
export class BinaryAnnotation extends thrift.StructLike implements IBinaryAnnotation {
    public key?: string;
    public value?: Buffer;
    public annotation_type?: AnnotationType.AnnotationType;
    public host?: Endpoint.IEndpoint;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IBinaryAnnotationArgs = {}) {
        super();
        if (args.key != null) {
            const value_5: string = args.key;
            this.key = value_5;
        }
        if (args.value != null) {
            const value_6: Buffer = (typeof args.value === "string" ? Buffer.from(args.value) : args.value);
            this.value = value_6;
        }
        if (args.annotation_type != null) {
            const value_7: AnnotationType.AnnotationType = args.annotation_type;
            this.annotation_type = value_7;
        }
        if (args.host != null) {
            const value_8: Endpoint.IEndpoint = new Endpoint.Endpoint(args.host);
            this.host = value_8;
        }
    }
    public static read(input: thrift.TProtocol): BinaryAnnotation {
        return new BinaryAnnotation(BinaryAnnotationCodec.decode(input));
    }
    public static write(args: IBinaryAnnotationArgs, output: thrift.TProtocol): void {
        return BinaryAnnotationCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return BinaryAnnotationCodec.encode(this, output);
    }
}
