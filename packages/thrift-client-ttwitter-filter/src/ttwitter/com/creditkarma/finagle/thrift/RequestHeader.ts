/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.6.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as __NAMESPACE__ from "./.";
export interface IRequestHeader {
    trace_id?: thrift.Int64;
    span_id?: thrift.Int64;
    parent_span_id?: thrift.Int64;
    sampled?: boolean;
    client_id?: __NAMESPACE__.IClientId;
    flags?: thrift.Int64;
    contexts?: Array<__NAMESPACE__.IRequestContext>;
    dest?: string;
    delegations?: Array<__NAMESPACE__.IDelegation>;
}
export interface IRequestHeaderArgs {
    trace_id?: number | string | thrift.Int64;
    span_id?: number | string | thrift.Int64;
    parent_span_id?: number | string | thrift.Int64;
    sampled?: boolean;
    client_id?: __NAMESPACE__.IClientIdArgs;
    flags?: number | string | thrift.Int64;
    contexts?: Array<__NAMESPACE__.IRequestContextArgs>;
    dest?: string;
    delegations?: Array<__NAMESPACE__.IDelegationArgs>;
}
export const RequestHeaderCodec: thrift.IStructCodec<IRequestHeaderArgs, IRequestHeader> = {
    encode(args: IRequestHeaderArgs, output: thrift.TProtocol): void {
        const obj = {
            trace_id: (typeof args.trace_id === "number" ? new thrift.Int64(args.trace_id) : typeof args.trace_id === "string" ? thrift.Int64.fromDecimalString(args.trace_id) : args.trace_id),
            span_id: (typeof args.span_id === "number" ? new thrift.Int64(args.span_id) : typeof args.span_id === "string" ? thrift.Int64.fromDecimalString(args.span_id) : args.span_id),
            parent_span_id: (typeof args.parent_span_id === "number" ? new thrift.Int64(args.parent_span_id) : typeof args.parent_span_id === "string" ? thrift.Int64.fromDecimalString(args.parent_span_id) : args.parent_span_id),
            sampled: args.sampled,
            client_id: args.client_id,
            flags: (typeof args.flags === "number" ? new thrift.Int64(args.flags) : typeof args.flags === "string" ? thrift.Int64.fromDecimalString(args.flags) : args.flags),
            contexts: args.contexts,
            dest: args.dest,
            delegations: args.delegations
        };
        output.writeStructBegin("RequestHeader");
        if (obj.trace_id != null) {
            output.writeFieldBegin("trace_id", thrift.TType.I64, 1);
            output.writeI64((typeof obj.trace_id === "number" ? new thrift.Int64(obj.trace_id) : typeof obj.trace_id === "string" ? thrift.Int64.fromDecimalString(obj.trace_id) : obj.trace_id));
            output.writeFieldEnd();
        }
        if (obj.span_id != null) {
            output.writeFieldBegin("span_id", thrift.TType.I64, 2);
            output.writeI64((typeof obj.span_id === "number" ? new thrift.Int64(obj.span_id) : typeof obj.span_id === "string" ? thrift.Int64.fromDecimalString(obj.span_id) : obj.span_id));
            output.writeFieldEnd();
        }
        if (obj.parent_span_id != null) {
            output.writeFieldBegin("parent_span_id", thrift.TType.I64, 3);
            output.writeI64((typeof obj.parent_span_id === "number" ? new thrift.Int64(obj.parent_span_id) : typeof obj.parent_span_id === "string" ? thrift.Int64.fromDecimalString(obj.parent_span_id) : obj.parent_span_id));
            output.writeFieldEnd();
        }
        if (obj.sampled != null) {
            output.writeFieldBegin("sampled", thrift.TType.BOOL, 5);
            output.writeBool(obj.sampled);
            output.writeFieldEnd();
        }
        if (obj.client_id != null) {
            output.writeFieldBegin("client_id", thrift.TType.STRUCT, 6);
            __NAMESPACE__.ClientIdCodec.encode(obj.client_id, output);
            output.writeFieldEnd();
        }
        if (obj.flags != null) {
            output.writeFieldBegin("flags", thrift.TType.I64, 7);
            output.writeI64((typeof obj.flags === "number" ? new thrift.Int64(obj.flags) : typeof obj.flags === "string" ? thrift.Int64.fromDecimalString(obj.flags) : obj.flags));
            output.writeFieldEnd();
        }
        if (obj.contexts != null) {
            output.writeFieldBegin("contexts", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRUCT, obj.contexts.length);
            obj.contexts.forEach((value_1: __NAMESPACE__.IRequestContextArgs): void => {
                __NAMESPACE__.RequestContextCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.dest != null) {
            output.writeFieldBegin("dest", thrift.TType.STRING, 9);
            output.writeString(obj.dest);
            output.writeFieldEnd();
        }
        if (obj.delegations != null) {
            output.writeFieldBegin("delegations", thrift.TType.LIST, 10);
            output.writeListBegin(thrift.TType.STRUCT, obj.delegations.length);
            obj.delegations.forEach((value_2: __NAMESPACE__.IDelegationArgs): void => {
                __NAMESPACE__.DelegationCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IRequestHeader {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_3: thrift.Int64 = input.readI64();
                        _args.trace_id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I64) {
                        const value_4: thrift.Int64 = input.readI64();
                        _args.span_id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I64) {
                        const value_5: thrift.Int64 = input.readI64();
                        _args.parent_span_id = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.sampled = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: __NAMESPACE__.IClientId = __NAMESPACE__.ClientIdCodec.decode(input);
                        _args.client_id = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I64) {
                        const value_8: thrift.Int64 = input.readI64();
                        _args.flags = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_9: Array<__NAMESPACE__.IRequestContext> = new Array<__NAMESPACE__.IRequestContext>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_10: __NAMESPACE__.IRequestContext = __NAMESPACE__.RequestContextCodec.decode(input);
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.contexts = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.dest = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.LIST) {
                        const value_12: Array<__NAMESPACE__.IDelegation> = new Array<__NAMESPACE__.IDelegation>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_13: __NAMESPACE__.IDelegation = __NAMESPACE__.DelegationCodec.decode(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.delegations = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            trace_id: _args.trace_id,
            span_id: _args.span_id,
            parent_span_id: _args.parent_span_id,
            sampled: _args.sampled,
            client_id: _args.client_id,
            flags: _args.flags,
            contexts: _args.contexts,
            dest: _args.dest,
            delegations: _args.delegations
        };
    }
};
export class RequestHeader extends thrift.StructLike implements IRequestHeader {
    public trace_id?: thrift.Int64;
    public span_id?: thrift.Int64;
    public parent_span_id?: thrift.Int64;
    public sampled?: boolean;
    public client_id?: __NAMESPACE__.IClientId;
    public flags?: thrift.Int64;
    public contexts?: Array<__NAMESPACE__.IRequestContext>;
    public dest?: string;
    public delegations?: Array<__NAMESPACE__.IDelegation>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IRequestHeaderArgs = {}) {
        super();
        if (args.trace_id != null) {
            const value_14: thrift.Int64 = (typeof args.trace_id === "number" ? new thrift.Int64(args.trace_id) : typeof args.trace_id === "string" ? thrift.Int64.fromDecimalString(args.trace_id) : args.trace_id);
            this.trace_id = value_14;
        }
        if (args.span_id != null) {
            const value_15: thrift.Int64 = (typeof args.span_id === "number" ? new thrift.Int64(args.span_id) : typeof args.span_id === "string" ? thrift.Int64.fromDecimalString(args.span_id) : args.span_id);
            this.span_id = value_15;
        }
        if (args.parent_span_id != null) {
            const value_16: thrift.Int64 = (typeof args.parent_span_id === "number" ? new thrift.Int64(args.parent_span_id) : typeof args.parent_span_id === "string" ? thrift.Int64.fromDecimalString(args.parent_span_id) : args.parent_span_id);
            this.parent_span_id = value_16;
        }
        if (args.sampled != null) {
            const value_17: boolean = args.sampled;
            this.sampled = value_17;
        }
        if (args.client_id != null) {
            const value_18: __NAMESPACE__.IClientId = new __NAMESPACE__.ClientId(args.client_id);
            this.client_id = value_18;
        }
        if (args.flags != null) {
            const value_19: thrift.Int64 = (typeof args.flags === "number" ? new thrift.Int64(args.flags) : typeof args.flags === "string" ? thrift.Int64.fromDecimalString(args.flags) : args.flags);
            this.flags = value_19;
        }
        if (args.contexts != null) {
            const value_20: Array<__NAMESPACE__.IRequestContext> = new Array<__NAMESPACE__.IRequestContext>();
            args.contexts.forEach((value_23: __NAMESPACE__.IRequestContextArgs): void => {
                const value_24: __NAMESPACE__.IRequestContext = new __NAMESPACE__.RequestContext(value_23);
                value_20.push(value_24);
            });
            this.contexts = value_20;
        }
        if (args.dest != null) {
            const value_21: string = args.dest;
            this.dest = value_21;
        }
        if (args.delegations != null) {
            const value_22: Array<__NAMESPACE__.IDelegation> = new Array<__NAMESPACE__.IDelegation>();
            args.delegations.forEach((value_25: __NAMESPACE__.IDelegationArgs): void => {
                const value_26: __NAMESPACE__.IDelegation = new __NAMESPACE__.Delegation(value_25);
                value_22.push(value_26);
            });
            this.delegations = value_22;
        }
    }
    public static read(input: thrift.TProtocol): RequestHeader {
        return new RequestHeader(RequestHeaderCodec.decode(input));
    }
    public static write(args: IRequestHeaderArgs, output: thrift.TProtocol): void {
        return RequestHeaderCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return RequestHeaderCodec.encode(this, output);
    }
}
