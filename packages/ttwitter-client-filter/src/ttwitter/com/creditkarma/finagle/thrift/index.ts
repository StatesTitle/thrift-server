/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.0.3-0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export enum AnnotationType {
    BOOL,
    BYTES,
    I16,
    I32,
    I64,
    DOUBLE,
    STRING
}
export const CLIENT_SEND: string = "cs";
export const CLIENT_RECV: string = "cr";
export const SERVER_SEND: string = "ss";
export const SERVER_RECV: string = "sr";
export const WIRE_SEND: string = "ws";
export const WIRE_RECV: string = "wr";
export const CLIENT_SEND_FRAGMENT: string = "csf";
export const CLIENT_RECV_FRAGMENT: string = "crf";
export const SERVER_SEND_FRAGMENT: string = "ssf";
export const SERVER_RECV_FRAGMENT: string = "srf";
export const CLIENT_ADDR: string = "ca";
export const SERVER_ADDR: string = "sa";
export interface IEndpoint {
    ipv4?: number;
    port?: number;
    service_name?: string;
}
export interface IEndpointArgs {
    ipv4?: number;
    port?: number;
    service_name?: string;
}
export const EndpointCodec: thrift.IStructCodec<IEndpointArgs, IEndpoint> = {
    encode(args: IEndpointArgs, output: thrift.TProtocol): void {
        const obj = {
            ipv4: args.ipv4,
            port: args.port,
            service_name: args.service_name
        };
        output.writeStructBegin("Endpoint");
        if (obj.ipv4 != null) {
            output.writeFieldBegin("ipv4", thrift.TType.I32, 1);
            output.writeI32(obj.ipv4);
            output.writeFieldEnd();
        }
        if (obj.port != null) {
            output.writeFieldBegin("port", thrift.TType.I16, 2);
            output.writeI16(obj.port);
            output.writeFieldEnd();
        }
        if (obj.service_name != null) {
            output.writeFieldBegin("service_name", thrift.TType.STRING, 3);
            output.writeString(obj.service_name);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IEndpoint {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.ipv4 = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I16) {
                        const value_2: number = input.readI16();
                        _args.port = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.service_name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            ipv4: _args.ipv4,
            port: _args.port,
            service_name: _args.service_name
        };
    }
};
export class Endpoint extends thrift.StructLike implements IEndpoint {
    public ipv4?: number;
    public port?: number;
    public service_name?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IEndpointArgs = {}) {
        super();
        if (args.ipv4 != null) {
            const value_4: number = args.ipv4;
            this.ipv4 = value_4;
        }
        if (args.port != null) {
            const value_5: number = args.port;
            this.port = value_5;
        }
        if (args.service_name != null) {
            const value_6: string = args.service_name;
            this.service_name = value_6;
        }
    }
    public static read(input: thrift.TProtocol): Endpoint {
        return new Endpoint(EndpointCodec.decode(input));
    }
    public static write(args: IEndpointArgs, output: thrift.TProtocol): void {
        return EndpointCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return EndpointCodec.encode(this, output);
    }
}
export interface IAnnotation {
    timestamp?: thrift.Int64;
    value?: string;
    host?: IEndpoint;
}
export interface IAnnotationArgs {
    timestamp?: number | thrift.Int64;
    value?: string;
    host?: IEndpointArgs;
}
export const AnnotationCodec: thrift.IStructCodec<IAnnotationArgs, IAnnotation> = {
    encode(args: IAnnotationArgs, output: thrift.TProtocol): void {
        const obj = {
            timestamp: (typeof args.timestamp === "number" ? new thrift.Int64(args.timestamp) : args.timestamp),
            value: args.value,
            host: args.host
        };
        output.writeStructBegin("Annotation");
        if (obj.timestamp != null) {
            output.writeFieldBegin("timestamp", thrift.TType.I64, 1);
            output.writeI64(obj.timestamp);
            output.writeFieldEnd();
        }
        if (obj.value != null) {
            output.writeFieldBegin("value", thrift.TType.STRING, 2);
            output.writeString(obj.value);
            output.writeFieldEnd();
        }
        if (obj.host != null) {
            output.writeFieldBegin("host", thrift.TType.STRUCT, 3);
            EndpointCodec.encode(obj.host, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAnnotation {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_7: thrift.Int64 = input.readI64();
                        _args.timestamp = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.value = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: IEndpoint = EndpointCodec.decode(input);
                        _args.host = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            timestamp: _args.timestamp,
            value: _args.value,
            host: _args.host
        };
    }
};
export class Annotation extends thrift.StructLike implements IAnnotation {
    public timestamp?: thrift.Int64;
    public value?: string;
    public host?: IEndpoint;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAnnotationArgs = {}) {
        super();
        if (args.timestamp != null) {
            const value_10: thrift.Int64 = (typeof args.timestamp === "number" ? new thrift.Int64(args.timestamp) : args.timestamp);
            this.timestamp = value_10;
        }
        if (args.value != null) {
            const value_11: string = args.value;
            this.value = value_11;
        }
        if (args.host != null) {
            const value_12: IEndpoint = new Endpoint(args.host);
            this.host = value_12;
        }
    }
    public static read(input: thrift.TProtocol): Annotation {
        return new Annotation(AnnotationCodec.decode(input));
    }
    public static write(args: IAnnotationArgs, output: thrift.TProtocol): void {
        return AnnotationCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AnnotationCodec.encode(this, output);
    }
}
export interface IBinaryAnnotation {
    key?: string;
    value?: Buffer;
    annotation_type?: AnnotationType;
    host?: IEndpoint;
}
export interface IBinaryAnnotationArgs {
    key?: string;
    value?: string | Buffer;
    annotation_type?: AnnotationType;
    host?: IEndpointArgs;
}
export const BinaryAnnotationCodec: thrift.IStructCodec<IBinaryAnnotationArgs, IBinaryAnnotation> = {
    encode(args: IBinaryAnnotationArgs, output: thrift.TProtocol): void {
        const obj = {
            key: args.key,
            value: (typeof args.value === "string" ? Buffer.from(args.value) : args.value),
            annotation_type: args.annotation_type,
            host: args.host
        };
        output.writeStructBegin("BinaryAnnotation");
        if (obj.key != null) {
            output.writeFieldBegin("key", thrift.TType.STRING, 1);
            output.writeString(obj.key);
            output.writeFieldEnd();
        }
        if (obj.value != null) {
            output.writeFieldBegin("value", thrift.TType.STRING, 2);
            output.writeBinary(obj.value);
            output.writeFieldEnd();
        }
        if (obj.annotation_type != null) {
            output.writeFieldBegin("annotation_type", thrift.TType.I32, 3);
            output.writeI32(obj.annotation_type);
            output.writeFieldEnd();
        }
        if (obj.host != null) {
            output.writeFieldBegin("host", thrift.TType.STRUCT, 4);
            EndpointCodec.encode(obj.host, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IBinaryAnnotation {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.key = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: Buffer = input.readBinary();
                        _args.value = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_15: AnnotationType = input.readI32();
                        _args.annotation_type = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_16: IEndpoint = EndpointCodec.decode(input);
                        _args.host = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            key: _args.key,
            value: _args.value,
            annotation_type: _args.annotation_type,
            host: _args.host
        };
    }
};
export class BinaryAnnotation extends thrift.StructLike implements IBinaryAnnotation {
    public key?: string;
    public value?: Buffer;
    public annotation_type?: AnnotationType;
    public host?: IEndpoint;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IBinaryAnnotationArgs = {}) {
        super();
        if (args.key != null) {
            const value_17: string = args.key;
            this.key = value_17;
        }
        if (args.value != null) {
            const value_18: Buffer = (typeof args.value === "string" ? Buffer.from(args.value) : args.value);
            this.value = value_18;
        }
        if (args.annotation_type != null) {
            const value_19: AnnotationType = args.annotation_type;
            this.annotation_type = value_19;
        }
        if (args.host != null) {
            const value_20: IEndpoint = new Endpoint(args.host);
            this.host = value_20;
        }
    }
    public static read(input: thrift.TProtocol): BinaryAnnotation {
        return new BinaryAnnotation(BinaryAnnotationCodec.decode(input));
    }
    public static write(args: IBinaryAnnotationArgs, output: thrift.TProtocol): void {
        return BinaryAnnotationCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return BinaryAnnotationCodec.encode(this, output);
    }
}
export interface ISpan {
    trace_id?: thrift.Int64;
    name?: string;
    id?: thrift.Int64;
    parent_id?: thrift.Int64;
    annotations?: Array<IAnnotation>;
    binary_annotations?: Array<IBinaryAnnotation>;
    debug?: boolean;
}
export interface ISpanArgs {
    trace_id?: number | thrift.Int64;
    name?: string;
    id?: number | thrift.Int64;
    parent_id?: number | thrift.Int64;
    annotations?: Array<IAnnotationArgs>;
    binary_annotations?: Array<IBinaryAnnotationArgs>;
    debug?: boolean;
}
export const SpanCodec: thrift.IStructCodec<ISpanArgs, ISpan> = {
    encode(args: ISpanArgs, output: thrift.TProtocol): void {
        const obj = {
            trace_id: (typeof args.trace_id === "number" ? new thrift.Int64(args.trace_id) : args.trace_id),
            name: args.name,
            id: (typeof args.id === "number" ? new thrift.Int64(args.id) : args.id),
            parent_id: (typeof args.parent_id === "number" ? new thrift.Int64(args.parent_id) : args.parent_id),
            annotations: args.annotations,
            binary_annotations: args.binary_annotations,
            debug: args.debug
        };
        output.writeStructBegin("Span");
        if (obj.trace_id != null) {
            output.writeFieldBegin("trace_id", thrift.TType.I64, 1);
            output.writeI64(obj.trace_id);
            output.writeFieldEnd();
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 3);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.I64, 4);
            output.writeI64(obj.id);
            output.writeFieldEnd();
        }
        if (obj.parent_id != null) {
            output.writeFieldBegin("parent_id", thrift.TType.I64, 5);
            output.writeI64(obj.parent_id);
            output.writeFieldEnd();
        }
        if (obj.annotations != null) {
            output.writeFieldBegin("annotations", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.STRUCT, obj.annotations.length);
            obj.annotations.forEach((value_21: IAnnotationArgs): void => {
                AnnotationCodec.encode(value_21, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.binary_annotations != null) {
            output.writeFieldBegin("binary_annotations", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRUCT, obj.binary_annotations.length);
            obj.binary_annotations.forEach((value_22: IBinaryAnnotationArgs): void => {
                BinaryAnnotationCodec.encode(value_22, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.debug != null) {
            output.writeFieldBegin("debug", thrift.TType.BOOL, 9);
            output.writeBool(obj.debug);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ISpan {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_23: thrift.Int64 = input.readI64();
                        _args.trace_id = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_24: string = input.readString();
                        _args.name = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I64) {
                        const value_25: thrift.Int64 = input.readI64();
                        _args.id = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I64) {
                        const value_26: thrift.Int64 = input.readI64();
                        _args.parent_id = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_27: Array<IAnnotation> = new Array<IAnnotation>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_28: IAnnotation = AnnotationCodec.decode(input);
                            value_27.push(value_28);
                        }
                        input.readListEnd();
                        _args.annotations = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_29: Array<IBinaryAnnotation> = new Array<IBinaryAnnotation>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_30: IBinaryAnnotation = BinaryAnnotationCodec.decode(input);
                            value_29.push(value_30);
                        }
                        input.readListEnd();
                        _args.binary_annotations = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_31: boolean = input.readBool();
                        _args.debug = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            trace_id: _args.trace_id,
            name: _args.name,
            id: _args.id,
            parent_id: _args.parent_id,
            annotations: _args.annotations,
            binary_annotations: _args.binary_annotations,
            debug: _args.debug
        };
    }
};
export class Span extends thrift.StructLike implements ISpan {
    public trace_id?: thrift.Int64;
    public name?: string;
    public id?: thrift.Int64;
    public parent_id?: thrift.Int64;
    public annotations?: Array<IAnnotation>;
    public binary_annotations?: Array<IBinaryAnnotation>;
    public debug?: boolean;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ISpanArgs = {}) {
        super();
        if (args.trace_id != null) {
            const value_32: thrift.Int64 = (typeof args.trace_id === "number" ? new thrift.Int64(args.trace_id) : args.trace_id);
            this.trace_id = value_32;
        }
        if (args.name != null) {
            const value_33: string = args.name;
            this.name = value_33;
        }
        if (args.id != null) {
            const value_34: thrift.Int64 = (typeof args.id === "number" ? new thrift.Int64(args.id) : args.id);
            this.id = value_34;
        }
        if (args.parent_id != null) {
            const value_35: thrift.Int64 = (typeof args.parent_id === "number" ? new thrift.Int64(args.parent_id) : args.parent_id);
            this.parent_id = value_35;
        }
        if (args.annotations != null) {
            const value_36: Array<IAnnotation> = new Array<IAnnotation>();
            args.annotations.forEach((value_39: IAnnotationArgs): void => {
                const value_40: IAnnotation = new Annotation(value_39);
                value_36.push(value_40);
            });
            this.annotations = value_36;
        }
        if (args.binary_annotations != null) {
            const value_37: Array<IBinaryAnnotation> = new Array<IBinaryAnnotation>();
            args.binary_annotations.forEach((value_41: IBinaryAnnotationArgs): void => {
                const value_42: IBinaryAnnotation = new BinaryAnnotation(value_41);
                value_37.push(value_42);
            });
            this.binary_annotations = value_37;
        }
        if (args.debug != null) {
            const value_38: boolean = args.debug;
            this.debug = value_38;
        }
    }
    public static read(input: thrift.TProtocol): Span {
        return new Span(SpanCodec.decode(input));
    }
    public static write(args: ISpanArgs, output: thrift.TProtocol): void {
        return SpanCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return SpanCodec.encode(this, output);
    }
}
export interface IClientId {
    name?: string;
}
export interface IClientIdArgs {
    name?: string;
}
export const ClientIdCodec: thrift.IStructCodec<IClientIdArgs, IClientId> = {
    encode(args: IClientIdArgs, output: thrift.TProtocol): void {
        const obj = {
            name: args.name
        };
        output.writeStructBegin("ClientId");
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 1);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IClientId {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_43: string = input.readString();
                        _args.name = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            name: _args.name
        };
    }
};
export class ClientId extends thrift.StructLike implements IClientId {
    public name?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IClientIdArgs = {}) {
        super();
        if (args.name != null) {
            const value_44: string = args.name;
            this.name = value_44;
        }
    }
    public static read(input: thrift.TProtocol): ClientId {
        return new ClientId(ClientIdCodec.decode(input));
    }
    public static write(args: IClientIdArgs, output: thrift.TProtocol): void {
        return ClientIdCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ClientIdCodec.encode(this, output);
    }
}
export interface IRequestContext {
    key?: Buffer;
    value?: Buffer;
}
export interface IRequestContextArgs {
    key?: string | Buffer;
    value?: string | Buffer;
}
export const RequestContextCodec: thrift.IStructCodec<IRequestContextArgs, IRequestContext> = {
    encode(args: IRequestContextArgs, output: thrift.TProtocol): void {
        const obj = {
            key: (typeof args.key === "string" ? Buffer.from(args.key) : args.key),
            value: (typeof args.value === "string" ? Buffer.from(args.value) : args.value)
        };
        output.writeStructBegin("RequestContext");
        if (obj.key != null) {
            output.writeFieldBegin("key", thrift.TType.STRING, 1);
            output.writeBinary(obj.key);
            output.writeFieldEnd();
        }
        if (obj.value != null) {
            output.writeFieldBegin("value", thrift.TType.STRING, 2);
            output.writeBinary(obj.value);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IRequestContext {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_45: Buffer = input.readBinary();
                        _args.key = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_46: Buffer = input.readBinary();
                        _args.value = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            key: _args.key,
            value: _args.value
        };
    }
};
export class RequestContext extends thrift.StructLike implements IRequestContext {
    public key?: Buffer;
    public value?: Buffer;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IRequestContextArgs = {}) {
        super();
        if (args.key != null) {
            const value_47: Buffer = (typeof args.key === "string" ? Buffer.from(args.key) : args.key);
            this.key = value_47;
        }
        if (args.value != null) {
            const value_48: Buffer = (typeof args.value === "string" ? Buffer.from(args.value) : args.value);
            this.value = value_48;
        }
    }
    public static read(input: thrift.TProtocol): RequestContext {
        return new RequestContext(RequestContextCodec.decode(input));
    }
    public static write(args: IRequestContextArgs, output: thrift.TProtocol): void {
        return RequestContextCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return RequestContextCodec.encode(this, output);
    }
}
export interface IDelegation {
    src?: string;
    dst?: string;
}
export interface IDelegationArgs {
    src?: string;
    dst?: string;
}
export const DelegationCodec: thrift.IStructCodec<IDelegationArgs, IDelegation> = {
    encode(args: IDelegationArgs, output: thrift.TProtocol): void {
        const obj = {
            src: args.src,
            dst: args.dst
        };
        output.writeStructBegin("Delegation");
        if (obj.src != null) {
            output.writeFieldBegin("src", thrift.TType.STRING, 1);
            output.writeString(obj.src);
            output.writeFieldEnd();
        }
        if (obj.dst != null) {
            output.writeFieldBegin("dst", thrift.TType.STRING, 2);
            output.writeString(obj.dst);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IDelegation {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_49: string = input.readString();
                        _args.src = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_50: string = input.readString();
                        _args.dst = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            src: _args.src,
            dst: _args.dst
        };
    }
};
export class Delegation extends thrift.StructLike implements IDelegation {
    public src?: string;
    public dst?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IDelegationArgs = {}) {
        super();
        if (args.src != null) {
            const value_51: string = args.src;
            this.src = value_51;
        }
        if (args.dst != null) {
            const value_52: string = args.dst;
            this.dst = value_52;
        }
    }
    public static read(input: thrift.TProtocol): Delegation {
        return new Delegation(DelegationCodec.decode(input));
    }
    public static write(args: IDelegationArgs, output: thrift.TProtocol): void {
        return DelegationCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return DelegationCodec.encode(this, output);
    }
}
export interface IRequestHeader {
    trace_id?: thrift.Int64;
    span_id?: thrift.Int64;
    parent_span_id?: thrift.Int64;
    sampled?: boolean;
    client_id?: IClientId;
    flags?: thrift.Int64;
    contexts?: Array<IRequestContext>;
    dest?: string;
    delegations?: Array<IDelegation>;
}
export interface IRequestHeaderArgs {
    trace_id?: number | thrift.Int64;
    span_id?: number | thrift.Int64;
    parent_span_id?: number | thrift.Int64;
    sampled?: boolean;
    client_id?: IClientIdArgs;
    flags?: number | thrift.Int64;
    contexts?: Array<IRequestContextArgs>;
    dest?: string;
    delegations?: Array<IDelegationArgs>;
}
export const RequestHeaderCodec: thrift.IStructCodec<IRequestHeaderArgs, IRequestHeader> = {
    encode(args: IRequestHeaderArgs, output: thrift.TProtocol): void {
        const obj = {
            trace_id: (typeof args.trace_id === "number" ? new thrift.Int64(args.trace_id) : args.trace_id),
            span_id: (typeof args.span_id === "number" ? new thrift.Int64(args.span_id) : args.span_id),
            parent_span_id: (typeof args.parent_span_id === "number" ? new thrift.Int64(args.parent_span_id) : args.parent_span_id),
            sampled: args.sampled,
            client_id: args.client_id,
            flags: (typeof args.flags === "number" ? new thrift.Int64(args.flags) : args.flags),
            contexts: args.contexts,
            dest: args.dest,
            delegations: args.delegations
        };
        output.writeStructBegin("RequestHeader");
        if (obj.trace_id != null) {
            output.writeFieldBegin("trace_id", thrift.TType.I64, 1);
            output.writeI64(obj.trace_id);
            output.writeFieldEnd();
        }
        if (obj.span_id != null) {
            output.writeFieldBegin("span_id", thrift.TType.I64, 2);
            output.writeI64(obj.span_id);
            output.writeFieldEnd();
        }
        if (obj.parent_span_id != null) {
            output.writeFieldBegin("parent_span_id", thrift.TType.I64, 3);
            output.writeI64(obj.parent_span_id);
            output.writeFieldEnd();
        }
        if (obj.sampled != null) {
            output.writeFieldBegin("sampled", thrift.TType.BOOL, 5);
            output.writeBool(obj.sampled);
            output.writeFieldEnd();
        }
        if (obj.client_id != null) {
            output.writeFieldBegin("client_id", thrift.TType.STRUCT, 6);
            ClientIdCodec.encode(obj.client_id, output);
            output.writeFieldEnd();
        }
        if (obj.flags != null) {
            output.writeFieldBegin("flags", thrift.TType.I64, 7);
            output.writeI64(obj.flags);
            output.writeFieldEnd();
        }
        if (obj.contexts != null) {
            output.writeFieldBegin("contexts", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRUCT, obj.contexts.length);
            obj.contexts.forEach((value_53: IRequestContextArgs): void => {
                RequestContextCodec.encode(value_53, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.dest != null) {
            output.writeFieldBegin("dest", thrift.TType.STRING, 9);
            output.writeString(obj.dest);
            output.writeFieldEnd();
        }
        if (obj.delegations != null) {
            output.writeFieldBegin("delegations", thrift.TType.LIST, 10);
            output.writeListBegin(thrift.TType.STRUCT, obj.delegations.length);
            obj.delegations.forEach((value_54: IDelegationArgs): void => {
                DelegationCodec.encode(value_54, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IRequestHeader {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_55: thrift.Int64 = input.readI64();
                        _args.trace_id = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I64) {
                        const value_56: thrift.Int64 = input.readI64();
                        _args.span_id = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I64) {
                        const value_57: thrift.Int64 = input.readI64();
                        _args.parent_span_id = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_58: boolean = input.readBool();
                        _args.sampled = value_58;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_59: IClientId = ClientIdCodec.decode(input);
                        _args.client_id = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I64) {
                        const value_60: thrift.Int64 = input.readI64();
                        _args.flags = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_61: Array<IRequestContext> = new Array<IRequestContext>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_62: IRequestContext = RequestContextCodec.decode(input);
                            value_61.push(value_62);
                        }
                        input.readListEnd();
                        _args.contexts = value_61;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_63: string = input.readString();
                        _args.dest = value_63;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.LIST) {
                        const value_64: Array<IDelegation> = new Array<IDelegation>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_65: IDelegation = DelegationCodec.decode(input);
                            value_64.push(value_65);
                        }
                        input.readListEnd();
                        _args.delegations = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            trace_id: _args.trace_id,
            span_id: _args.span_id,
            parent_span_id: _args.parent_span_id,
            sampled: _args.sampled,
            client_id: _args.client_id,
            flags: _args.flags,
            contexts: _args.contexts,
            dest: _args.dest,
            delegations: _args.delegations
        };
    }
};
export class RequestHeader extends thrift.StructLike implements IRequestHeader {
    public trace_id?: thrift.Int64;
    public span_id?: thrift.Int64;
    public parent_span_id?: thrift.Int64;
    public sampled?: boolean;
    public client_id?: IClientId;
    public flags?: thrift.Int64;
    public contexts?: Array<IRequestContext>;
    public dest?: string;
    public delegations?: Array<IDelegation>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IRequestHeaderArgs = {}) {
        super();
        if (args.trace_id != null) {
            const value_66: thrift.Int64 = (typeof args.trace_id === "number" ? new thrift.Int64(args.trace_id) : args.trace_id);
            this.trace_id = value_66;
        }
        if (args.span_id != null) {
            const value_67: thrift.Int64 = (typeof args.span_id === "number" ? new thrift.Int64(args.span_id) : args.span_id);
            this.span_id = value_67;
        }
        if (args.parent_span_id != null) {
            const value_68: thrift.Int64 = (typeof args.parent_span_id === "number" ? new thrift.Int64(args.parent_span_id) : args.parent_span_id);
            this.parent_span_id = value_68;
        }
        if (args.sampled != null) {
            const value_69: boolean = args.sampled;
            this.sampled = value_69;
        }
        if (args.client_id != null) {
            const value_70: IClientId = new ClientId(args.client_id);
            this.client_id = value_70;
        }
        if (args.flags != null) {
            const value_71: thrift.Int64 = (typeof args.flags === "number" ? new thrift.Int64(args.flags) : args.flags);
            this.flags = value_71;
        }
        if (args.contexts != null) {
            const value_72: Array<IRequestContext> = new Array<IRequestContext>();
            args.contexts.forEach((value_75: IRequestContextArgs): void => {
                const value_76: IRequestContext = new RequestContext(value_75);
                value_72.push(value_76);
            });
            this.contexts = value_72;
        }
        if (args.dest != null) {
            const value_73: string = args.dest;
            this.dest = value_73;
        }
        if (args.delegations != null) {
            const value_74: Array<IDelegation> = new Array<IDelegation>();
            args.delegations.forEach((value_77: IDelegationArgs): void => {
                const value_78: IDelegation = new Delegation(value_77);
                value_74.push(value_78);
            });
            this.delegations = value_74;
        }
    }
    public static read(input: thrift.TProtocol): RequestHeader {
        return new RequestHeader(RequestHeaderCodec.decode(input));
    }
    public static write(args: IRequestHeaderArgs, output: thrift.TProtocol): void {
        return RequestHeaderCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return RequestHeaderCodec.encode(this, output);
    }
}
export interface IResponseHeader {
    spans?: Array<ISpan>;
    contexts?: Array<IRequestContext>;
}
export interface IResponseHeaderArgs {
    spans?: Array<ISpanArgs>;
    contexts?: Array<IRequestContextArgs>;
}
export const ResponseHeaderCodec: thrift.IStructCodec<IResponseHeaderArgs, IResponseHeader> = {
    encode(args: IResponseHeaderArgs, output: thrift.TProtocol): void {
        const obj = {
            spans: args.spans,
            contexts: args.contexts
        };
        output.writeStructBegin("ResponseHeader");
        if (obj.spans != null) {
            output.writeFieldBegin("spans", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.STRUCT, obj.spans.length);
            obj.spans.forEach((value_79: ISpanArgs): void => {
                SpanCodec.encode(value_79, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.contexts != null) {
            output.writeFieldBegin("contexts", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, obj.contexts.length);
            obj.contexts.forEach((value_80: IRequestContextArgs): void => {
                RequestContextCodec.encode(value_80, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IResponseHeader {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_81: Array<ISpan> = new Array<ISpan>();
                        const metadata_5: thrift.IThriftList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_82: ISpan = SpanCodec.decode(input);
                            value_81.push(value_82);
                        }
                        input.readListEnd();
                        _args.spans = value_81;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_83: Array<IRequestContext> = new Array<IRequestContext>();
                        const metadata_6: thrift.IThriftList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_84: IRequestContext = RequestContextCodec.decode(input);
                            value_83.push(value_84);
                        }
                        input.readListEnd();
                        _args.contexts = value_83;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            spans: _args.spans,
            contexts: _args.contexts
        };
    }
};
export class ResponseHeader extends thrift.StructLike implements IResponseHeader {
    public spans?: Array<ISpan>;
    public contexts?: Array<IRequestContext>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IResponseHeaderArgs = {}) {
        super();
        if (args.spans != null) {
            const value_85: Array<ISpan> = new Array<ISpan>();
            args.spans.forEach((value_87: ISpanArgs): void => {
                const value_88: ISpan = new Span(value_87);
                value_85.push(value_88);
            });
            this.spans = value_85;
        }
        if (args.contexts != null) {
            const value_86: Array<IRequestContext> = new Array<IRequestContext>();
            args.contexts.forEach((value_89: IRequestContextArgs): void => {
                const value_90: IRequestContext = new RequestContext(value_89);
                value_86.push(value_90);
            });
            this.contexts = value_86;
        }
    }
    public static read(input: thrift.TProtocol): ResponseHeader {
        return new ResponseHeader(ResponseHeaderCodec.decode(input));
    }
    public static write(args: IResponseHeaderArgs, output: thrift.TProtocol): void {
        return ResponseHeaderCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ResponseHeaderCodec.encode(this, output);
    }
}
export interface IConnectionOptions {
}
export interface IConnectionOptionsArgs {
}
export const ConnectionOptionsCodec: thrift.IStructCodec<IConnectionOptionsArgs, IConnectionOptions> = {
    encode(args: IConnectionOptionsArgs, output: thrift.TProtocol): void {
        output.writeStructBegin("ConnectionOptions");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IConnectionOptions {
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {};
    }
};
export class ConnectionOptions extends thrift.StructLike implements IConnectionOptions {
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IConnectionOptionsArgs = {}) {
        super();
    }
    public static read(input: thrift.TProtocol): ConnectionOptions {
        return new ConnectionOptions(ConnectionOptionsCodec.decode(input));
    }
    public static write(args: IConnectionOptionsArgs, output: thrift.TProtocol): void {
        return ConnectionOptionsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ConnectionOptionsCodec.encode(this, output);
    }
}
export interface IUpgradeReply {
}
export interface IUpgradeReplyArgs {
}
export const UpgradeReplyCodec: thrift.IStructCodec<IUpgradeReplyArgs, IUpgradeReply> = {
    encode(args: IUpgradeReplyArgs, output: thrift.TProtocol): void {
        output.writeStructBegin("UpgradeReply");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IUpgradeReply {
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {};
    }
};
export class UpgradeReply extends thrift.StructLike implements IUpgradeReply {
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IUpgradeReplyArgs = {}) {
        super();
    }
    public static read(input: thrift.TProtocol): UpgradeReply {
        return new UpgradeReply(UpgradeReplyCodec.decode(input));
    }
    public static write(args: IUpgradeReplyArgs, output: thrift.TProtocol): void {
        return UpgradeReplyCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return UpgradeReplyCodec.encode(this, output);
    }
}
